#+TITLE: hass

[[https://melpa.org/#/hass][file:https://melpa.org/packages/hass-badge.svg]]
[[https://stable.melpa.org/#/hass][file:https://stable.melpa.org/packages/hass-badge.svg]]

~hass~ enables you to control [[https://www.home-assistant.io/][Home Assistant]] entities from Emacs.

* Installation

This package is available on [[https://melpa.org/][MELPA]].

** use-package

#+BEGIN_SRC emacs-lisp :results none
(use-package hass
  :ensure t
  :init
  ;; -- Configuration goes here --
  )
#+END_SRC

** straight.el

#+BEGIN_SRC emacs-lisp :results none
(straight-use-package 'hass)
;; -- Configuration goes here --
#+END_SRC

** Doom Emacs

Place in your ~packages.el~ then run ~doom sync~ to pull the repository:

#+BEGIN_SRC emacs-lisp :results none
(package! hass)
#+END_SRC

Then load the package in your main config file.

#+BEGIN_SRC emacs-lisp :results none
(use-package! hass
  :init
  ;; -- Configuration goes here --
  )
#+END_SRC

* Breaking Changes

** Deprecated hass-url

The ~hass-url~ variable is now deprecated. This has been split up into 3 variables ~hass-host~, ~hass-insecure~, and ~hass-port~. ~hass-host~ must always be set. Hass is secure by default, so ~hass-insecure~ needs to be ~t~ if SSL is not being used (i.e HTTP and not HTTPS). If using a non-default port number, ~hass-port~ must be set to the port number.

#+BEGIN_SRC emacs-lisp :results none
;; The old URL variable
;; (setq hass-url "http://homeassistant:8123")

;; Is now this
(setq hass-host "homeassistant")
(setq hass-insecure t)
(setq hass-port 8123) ; Not necessary to set since `8123' is default.
(hass-setup)
#+END_SRC

#+BEGIN_SRC emacs-lisp :results none
;; An SSL-enabled instance can just configure `hass-host'.
;; (setq hass-url "http://homeassistant:8123")

;; Is now this
(setq hass-host "homeassistant")
(hass-setup)
#+END_SRC

This change was implemented to support the ~hass-websockets~ extension package. This uses a different protocol and splitting out the URL into components makes it much easier to generate the websocket URL automatically.

The package will currently parse ~hass-url~ if it is set and convert it into its appropriate configuration variables. This will be removed in the future.

** Renamed hass-watch-mode

~hass-watch-mode~ is now ~hass-polling-mode~. This new name is clearer on what it functionally does,
periodically poll the Home Assistant instance.

** hass-watch-entities

~hass-watch-entities~ was named to have a prefix of ~hass-watch-~ as part of the ~hass-watch-mode~ functionality. Since ~hass-watch-mode~ was renamed and the variable will be used outside of the ~hass-polling~ functionality, the variable was renamed to ~hass-tracked-entities~ to indicate the entities will be tracked, or in other words, queried for updates.

* Configuration

Both ~hass-host~ and ~hass-apikey~ must be set to use this package. Set ~hass-host~ to the hostname or IP of Home Assistant instance. If you are not using SSL/TLS to connect to your Home Assistance instance, set ~hass-insecure~ to ~t~. If you are using a port number other than the default =8123=,
specify the port number with ~hass-port~.

#+BEGIN_SRC emacs-lisp :results none
(setq hass-host "homeassistant")
(setq hass-apikey "APIKEY-GOES-IN-HERE")
(setq hass-port 8123)
(hass-setup)
#+END_SRC

Alternatively, you can store a function inside ~hass-apikey~. This will be executed on every query. In turn, this approach requires the token to be stored in your gpg store e.g. =~/.password-store/emacs-apikey.gpg=

#+BEGIN_SRC emacs-lisp :results none
(setq hass-host "homeassistant")
(setq hass-apikey (lambda () (auth-source-pass-get 'secret "emacs-apikey")))
(hass-setup)
#+END_SRC

Once those variables are set, you must call ~(hass-setup)~ before using this package so that it can query the Home Assistance instance and populate available entities and services.

** Dashboard layout

To use the dashboard feature, ~hass-dash-layout~ must be configure to tell ~hass~ what the layout should look like.

Each element in ~hass-dash-layout~ is a group.

A group is an alist of the name of the group to a list widgets.

A widget is a list where the first symbol is the entity id and the rest are the properties:

| Property   | Description                                                         |
|------------+---------------------------------------------------------------------|
| ~:name~    | The human readable name of the widget to be shown on the dashboard. |
| ~:service~ | The service to be called when the widget is selected.               |
| ~:icon~    | The icon to be shown prefix to the widget.                          |
| ~:state~   | An entity id of the state to be shown next to the widget.           |

*** Full example
#+BEGIN_SRC emacs-lisp :results none
(setq `hass-dash-layout'
 '(("Group One" . (("input_boolean.test_boolean" :name "Toggle entity")
                   ("switch.bedroom_light" :name "Bedroom Light")
                   ("input_boolean.test_boolean" :name "Turn off test boolean" :service "input_boolean.turn_off")
                   ("automation.some_automation")))
   ("Vacuum Group" . (("vacuum.valetudo_vacuum" :name "Vacuum")
                      ("vacuum.valetudo_vacuum" :name "Vacuum return home"
                                                :service "vacuum.return_to_base"
                                                :state nil
                                                :icon nil)))))
#+END_SRC

** Getting an API Key

Ensure that your Home Assistant instance is configured to support API calls by following the instructions [[https://www.home-assistant.io/integrations/api/][here]].

Retrieve your API key a.k.a. /Long-Lived Access Token/ by logging into your Home Assistant instance and going to your profile by selecting your username in the lower-left corner or going to this URL: =http://HOME-ASSISTANT-URL:8123/profile=. You can generate an API token at the very bottom of this page.

* Usage

To call a service on Home Assistant, use the ~hass-call-service~ function which has two required arguments: ~entity-id~ and ~service~.

#+BEGIN_SRC emacs-lisp :results none
(hass-call-service "switch.bedroom_light" "switch.toggle")
#+END_SRC

If you call ~hass-call-service~ interactively, it will prompt you for an entity ID and then the respective service you want to call.

** Dashboard

After configuring the ~hass-dash-layout~, use the function ~hass-dash-open~ to pop open the dashboard. This can be enhanced with standard buffer management configuration or packages like =popper= and/or =shackle=.

** Payloads

For services that require additional data use the ~hass-call-service-with-payload~ function. The second argument, ~payload~, requires an JSON encoded string.

This example publishes to an MQTT topic:

#+BEGIN_SRC emacs-lisp :results none
(hass-call-service-with-payload
 "mqtt.publish"
 (json-encode '(("payload" . "PERFORM")
                ("topic" . "valetudo/vacuum/LocateCapability/locate/set"))))
#+END_SRC

You could pass a JSON string directly, but that would require escaping every quote which can be cumbersome. Here's what the encoded list above looks like in JSON:

#+BEGIN_SRC javascript
{
  "payload": "PERFORM",
  "topic": "valetudo/vacuum/LocateCapability/locate/set"
}
#+END_SRC

** Tracking entities

To retrieve automatic updates of specific entities, you must configure the ~hass-tracked-entities~ variable with a list of entities.

#+BEGIN_SRC emacs-lisp :results none
(setq hass-tracked-entities '("switch.bedroom_light" "switch.bedroom_fan"))
#+END_SRC

Then you can enable either ~hass-websocket-mode~ or ~hass-polling-mode~.

~hass-websocket-mode~ is a mode that receives updates from Home Assistant over websockets. This enables realtime updates to entity states. Highly recommended if using the dashboard feature.

#+BEGIN_SRC emacs-lisp :results none
(hass-websocket-mode t)
#+END_SRC

~hass-polling-mode~ is a mode that periodically queries the Home Assistant instance to get the current state of a list of entities.

The frequency of the query can be adjusted by setting ~hass-polling-frequency~ to the number of seconds you'd like. Defaults to 60.

** Hooks

The most useful hook is a function list named ~hass-entity-state-updated-functions~. Functions in this list are passed a single argument ~entity-id~ which is the entity id of the entity whose state has changed since it was last updated. Using this function hook along side [[*Tracking entities][tracking entities]] enables Emacs to react to changes to Home Assistant entities.

This example will display the state of an entity when it changes:

#+BEGIN_SRC emacs-lisp :results none
(add-hook 'hass-entity-state-updated-functions
  (lambda (entity-id)
    (message "The entity %s state has changed to %s." entity-id (hass-state-of entity-id))))
#+END_SRC

The other two hooks available are ~hass-entity-state-updated-hook~ and ~hass-service-called-hook~. ~hass-entity-state-updated-hook~ is called when the state of an entity is updated, regardless of if it changed or not. ~hass-service-called-hook~ is called when a service
is called.

#+BEGIN_SRC emacs-lisp :results none
(add-hook 'hass-service-called-hook (lambda () (message "A service was called.")))
(add-hook 'hass-entity-state-updated-hook (lambda () (message "An entitys' state was updated.")))
#+END_SRC

* License

MIT
