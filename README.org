#+TITLE: hass

[[https://melpa.org/#/hass][file:https://melpa.org/packages/hass-badge.svg]]
[[https://stable.melpa.org/#/hass][file:https://stable.melpa.org/packages/hass-badge.svg]]

~hass~ enables you to control [[https://www.home-assistant.io/][Home Assistant]] entities from Emacs.

[[file:images/screenshot1.png]]

* Table of Contents
:PROPERTIES:
:TOC:      :include all :force ((nothing)) :ignore (this) :local (nothing)
:END:
:CONTENTS:
- [[#installation][Installation]]
  - [[#use-package][use-package]]
  - [[#straightel][straight.el]]
  - [[#doom-emacs][Doom Emacs]]
- [[#important-changes][Important Changes]]
  - [[#deprecated-name-keyword-argument-on-widgets][Deprecated :name keyword argument on widgets]]
  - [[#deprecated-hass-url][Deprecated hass-url]]
  - [[#renamed-hass-watch-mode][Renamed hass-watch-mode]]
  - [[#hass-watch-entities][hass-watch-entities]]
- [[#configuration][Configuration]]
  - [[#getting-an-api-key][Getting an API Key]]
  - [[#dashboard-layout][Dashboard layout]]
    - [[#full-example][Full example]]
    - [[#structure][Structure]]
    - [[#formatters][Formatters]]
      - [[#component-formatters][Component formatters]]
      - [[#widget-formatters][Widget formatters]]
      - [[#default-formatters][Default formatters]]
- [[#usage][Usage]]
  - [[#dashboard][Dashboard]]
  - [[#payloads][Payloads]]
  - [[#tracking-entities][Tracking entities]]
  - [[#hooks][Hooks]]
- [[#license][License]]
:END:

* Installation
This package is available on [[https://melpa.org/][MELPA]].

** use-package

#+BEGIN_SRC emacs-lisp :results none
(use-package hass
  :ensure t
  :init
  ;; -- Configuration goes here --
  )
#+END_SRC

** straight.el

#+BEGIN_SRC emacs-lisp :results none
(straight-use-package 'hass)
;; -- Configuration goes here --
#+END_SRC

** Doom Emacs

Place in your ~packages.el~ then run ~doom sync~ to pull the repository:

#+BEGIN_SRC emacs-lisp :results none
(package! hass)
#+END_SRC

Then load the package in your main config file.

#+BEGIN_SRC emacs-lisp :results none
(use-package! hass
  :init
  ;; -- Configuration goes here --
  )
#+END_SRC

* Important Changes
** Deprecated ~:name~ keyword argument on widgets

When defining widgets, the ~:name~ keyword argument has been replaced with ~:label~. The word 'label' is clearer to describe that the value will be rendered to the dashboard.

** Deprecated hass-url

The ~hass-url~ variable is now deprecated. This has been split up into 3 variables ~hass-host~, ~hass-insecure~, and ~hass-port~. ~hass-host~ must always be set. Hass is secure by default, so ~hass-insecure~ needs to be ~t~ if SSL is not being used (i.e HTTP and not HTTPS). If using a non-default port number, ~hass-port~ must be set to the port number.

#+BEGIN_SRC emacs-lisp :results none
;; The old URL variable
;; (setq hass-url "http://homeassistant:8123")

;; Is now this
(setq hass-host "homeassistant")
(setq hass-insecure t)
(setq hass-port 8123) ; Not necessary to set since `8123' is default.
(hass-setup)
#+END_SRC

#+BEGIN_SRC emacs-lisp :results none
;; An SSL-enabled instance can just configure `hass-host'.
;; (setq hass-url "http://homeassistant:8123")

;; Is now this
(setq hass-host "homeassistant")
(hass-setup)
#+END_SRC

This change was implemented to support the ~hass-websockets~ extension. This uses a different protocol and splitting out the URL into components makes it much easier to generate the websocket URL automatically.

The package will currently parse ~hass-url~ if it is set and convert it into its appropriate configuration variables. This will be removed in the future.

** Renamed hass-watch-mode

~hass-watch-mode~ is now ~hass-polling-mode~. This new name is clearer on what it functionally does,
periodically poll the Home Assistant instance.

** hass-watch-entities

~hass-watch-entities~ was named to have a prefix of ~hass-watch-~ as part of the ~hass-watch-mode~ functionality. Since ~hass-watch-mode~ was renamed and the variable will be used outside of the ~hass-polling~ functionality, the variable was renamed to ~hass-tracked-entities~ to indicate the entities will be tracked, or in other words, queried for updates.

* Configuration

Both ~hass-host~ and ~hass-apikey~ must be set to use this package. Set ~hass-host~ to the hostname or IP of Home Assistant instance. If you are not using SSL/TLS to connect to your Home Assistance instance, set ~hass-insecure~ to ~t~. If you are using a port number other than the default =8123=,
specify the port number with ~hass-port~.

#+BEGIN_SRC emacs-lisp :results none
(setq hass-host "homeassistant")
(setq hass-apikey "APIKEY-GOES-IN-HERE")
(setq hass-port 8123)
(hass-setup)
#+END_SRC

Alternatively, you can store a function inside ~hass-apikey~. This will be executed on every query. In turn, this approach requires the token to be stored in your gpg store e.g. =~/.password-store/emacs-apikey.gpg=

#+BEGIN_SRC emacs-lisp :results none
(setq hass-host "homeassistant")
(setq hass-apikey (lambda () (auth-source-pass-get 'secret "emacs-apikey")))
(hass-setup)
#+END_SRC

Once those variables are set, you must call ~(hass-setup)~ before using this package so that it can query the Home Assistance instance and populate available entities and services.
** Getting an API Key

Ensure that your Home Assistant instance is configured to support API calls by following the instructions [[https://www.home-assistant.io/integrations/api/][here]].

Retrieve your API key a.k.a. /Long-Lived Access Token/ by logging into your Home Assistant instance and going to your profile by selecting your username in the lower-left corner or going to this URL: =http://HOME-ASSISTANT-URL:8123/profile=. You can generate an API token at the very bottom of this page.

** Dashboard layout

*** Full example
#+BEGIN_SRC emacs-lisp :results none
(defun state-label-icon (label state icon label-formatter state-formatter icon-formatter)
  "Arrange the components of the widget in the order of STATE, LABEL, and then icon."
  (concat (when state (funcall state-formatter state))
          (funcall label-formatter label)
          (when icon (funcall icon-formatter icon))))

(defun prefix-with-arrow (str)
  "Prefix STR with a `>'."
  (concat "> " str))

(defun unavailable-p (widget)
  "Return t if WIDGET state is 'unavailable'."
  (string= "unavailable" (hass-state-of (car widget))))

(setq hass-dash-layout
 ;; Declare a group of widgets with a group label of "Group One"
 '(("Group One" . (("input_boolean.test_boolean"
                     :label "Toggle entity"
                     :hide-fn (lambda (_widget) (= 1 (random 2))) ;; Will randomly hide the widget 50% of the time everytime the dashboard refreshes
                     :widget-formatter state-label-icon
                     :label-formatter prefix-with-arrow
                     :state-formatter prefix-with-arrow
                     :icon-formatter (lambda (icon) (concat "[" icon "]")))

                   ;; An informational widget
                   ("sensor.desktop_cpu"
                     :label "CPU"
                     :icon nil
                     :service nil ;; Setting `:service' to nil will skip when pressing the TAB key
                     :hide-fn unavailable-p ;; Hide this widget if the status if 'unavailable'
                     :state-formatter (lambda (state) (concat state "%"))) ;; Add a '%' to the end of the state

                   ;; Ask for confirmation before toggling the light
                   ("switch.bedroom_light"
                     :label "Bedroom Light"
                     :confirm t)

                   ;; A widget that can only turn off
                   ("input_boolean.test_boolean"
                     :label "Turn off test boolean"
                     :service "input_boolean.turn_off")
                   
                   ;; Or just use the default options
                   ("automation.some_automation")))

   ;; Declare another group of widgets with a group label of "Vacuum"
   ("Vacuum" . (("vacuum.valetudo_vacuum"
                  :label "Vacuum"
                  :confirm "Start vacuuming? ") ;; Ask for confirmation with a custom prompt

                ("vacuum.valetudo_vacuum"
                  :label "Vacuum return home"
                  :service "vacuum.return_to_base" ;; Call this service instead of the default one to start cleaning
                  :state nil ;; Don't show a state since it's displayed above
                  :icon nil))))) ;; Don't show an icon
#+END_SRC

*** Structure
To use the dashboard feature, ~hass-dash-layout~ must be configure to tell ~hass~ what the layout should look like. The layout is constructed with three components: *groups*, *widgets*, and *properties*.

- Each element in ~hass-dash-layout~ is a *group*.
- A *group* is an alist of the string of the *group*'s label to a list *widgets*.
- A *widget* is a plist where the first symbol is the entity id string and the rest are the *properties*.

| Widget Property     | Description                                                                                  |
|---------------------+----------------------------------------------------------------------------------------------|
| ~:label~            | The human readable label of the widget to be shown on the dashboard.                         |
| ~:service~          | The service to be called when the widget is selected.                                        |
| ~:icon~             | The icon to be shown prefixed to the widget.                                                 |
| ~:state~            | An entity id of the state to be shown next to the widget.                                    |
| ~:widget-formatter~ | The function used to format the widgets on the dashboard.                                    |
| ~:label-formatter~  | The function used to format the label of the widget.                                         |
| ~:state-formatter~  | The function used to format the state of the widget.                                         |
| ~:icon-formatter~   | The function used to format the icon of the widget.                                          |
| ~:hide-fn~          | A function with single argument which is the widget definition. When t, don't render widget. |
| ~:confirm~          | When ~t~ or a string, ask for confirmation before calling the service.                     |

Any widgets defined in ~hass-dash-layout~ are automatically inserted into the ~hass-tracked-entities~ list in order to receive state updates. If the widget property ~:state~ is specified, then that is the entity id that is tracked instead.

*** Formatters

*Formatters* are way to customize how a widget is rendered to the dashboard. A *widget formatter* is special in that it takes all the components of a widget and applies the *label*, *state*, and *icon* *formatters* appropriately enabling you to completely customize a widget.

**** Component formatters

A simple implementation of a *formatter* can just modify the string itself, for example, prefixing it with a =>=. The following example can be used for any of the *label*, *state*, or *icon* *formatters*:

#+BEGIN_SRC emacs-lisp :results none
(defun prefix-with-arrow (str)
  "Prefix STR with a `>'"
  (concat "> " str))
#+END_SRC

**** Widget formatters

A *widget formatter* is slightly more complicated since it has to take all the components of a widget and fit them together. The following example re-arranges the widgets to have the *state* displayed first, then the *label*, and then suffixes it with the *icon*. It may be important, but not required, to remember to apply the *formatters* using ~funcall~, though this is technically optional (see the 'bland' example). Also note that *state* and *icon* are being checked to be non-nil before used. These two arguments are optional and may not be set.

#+BEGIN_SRC emacs-lisp :results none
(defun state-label-icon (label state icon label-formatter state-formatter icon-formatter)
  "Arrange the components of the widget in the order of state, label, and then icon."
  (concat (when state (funcall state-formatter state))
          (funcall label-formatter label)
          (when icon (funcall icon-formatter icon))))
#+END_SRC

You could just as easily display a bland widget by ignoring the *formatters* entirely:
#+BEGIN_SRC emacs-lisp :results none
(defun bland-widget-formatter (label state icon &rest _)
  "Render a bland widget with no formatting applied."
  (concat icon label state))
#+END_SRC

**** Default formatters

To configure a default *formatter* when one isn't define explicitly provided to a widget, use the variables ~hass-dash-default-widget-formatter~, ~hass-dash-default-label-formatter~, ~hass-dash-default-state-formatter~, and ~hass-dash-default-icon-formatter~. By default, they're set to the built-in *formatters* that are used to render the dashboard.

* Usage

To call a service on Home Assistant, use the ~hass-call-service~ function which has two required arguments: ~entity-id~ and ~service~.

#+BEGIN_SRC emacs-lisp :results none
(hass-call-service "switch.bedroom_light" "switch.toggle")
#+END_SRC

If you call ~hass-call-service~ interactively, it will prompt you for an entity ID and then the respective service you want to call.

** Dashboard

After configuring the ~hass-dash-layout~, use the function ~hass-dash-open~ to pop open the dashboard. This can be enhanced with standard buffer management configuration or packages like =popper= and/or =shackle=.

** Payloads

For services that require additional data use the ~hass-call-service-with-payload~ function. The second argument, ~payload~, requires an JSON encoded string.

This example publishes to an MQTT topic:

#+BEGIN_SRC emacs-lisp :results none
(hass-call-service-with-payload
 "mqtt.publish"
 (json-encode '(("payload" . "PERFORM")
                ("topic" . "valetudo/vacuum/LocateCapability/locate/set"))))
#+END_SRC

You could pass a JSON string directly, but that would require escaping every quote which can be cumbersome. Here's what the encoded list above looks like in JSON:

#+BEGIN_SRC javascript
{
  "payload": "PERFORM",
  "topic": "valetudo/vacuum/LocateCapability/locate/set"
}
#+END_SRC

** Tracking entities

To retrieve automatic updates of specific entities, you must configure the ~hass-tracked-entities~ variable with a list of entities.

#+BEGIN_SRC emacs-lisp :results none
(setq hass-tracked-entities '("switch.bedroom_light" "switch.bedroom_fan"))
#+END_SRC

Then you can enable either ~hass-websocket-mode~ or ~hass-polling-mode~.

~hass-websocket-mode~, requires =websocket= package, is a mode that receives updates from Home Assistant over a websocket. This enables real-time updates to entity states. Highly recommended if using the dashboard feature.

#+BEGIN_SRC emacs-lisp :results none
(hass-websocket-mode t)
#+END_SRC

~hass-polling-mode~ is a mode that periodically queries the Home Assistant instance to get the current state of a list of entities.

The frequency of the query can be adjusted by setting ~hass-polling-frequency~ to the number of seconds you'd like. Defaults to 60.

** Hooks

The most useful hook is a function list named ~hass-entity-state-changed-functions~. Functions in this list are passed a single argument ~entity-id~ which is the entity id of the entity whose state has changed since it was last updated. Using this function hook along side [[*Tracking entities][tracking entities]] enables Emacs to react to changes to Home Assistant entities.

This example will display the state of an entity when it changes:

#+BEGIN_SRC emacs-lisp :results none
(add-hook 'hass-entity-state-changed-functions
  (lambda (entity-id)
    (message "The entity %s state has changed to %s." entity-id (hass-state-of entity-id))))
#+END_SRC

The other two hooks available are ~hass-entity-updated-hook~ and ~hass-service-called-hook~. ~hass-entity-updated-hook~ is called when the state of an entity is updated, regardless of if it changed or not. ~hass-service-called-hook~ is called when a service
is called.

#+BEGIN_SRC emacs-lisp :results none
(add-hook 'hass-service-called-hook (lambda () (message "A service was called.")))
(add-hook 'hass-entity-updated-hook (lambda () (message "An entitys' state was updated.")))
#+END_SRC

* License

MIT
